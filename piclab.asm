;*********************************************************************************************
;*Модуль: "safirmx.asm"
;*Назначение: Главный Модуль проекта. Объединяет всё разработанное программное обеспечение в
;*единый проект.
;*********************************************************************************************
;*********************************************************************************************
;*		ПРОГРАМMНОЕ ПРИЛОЖЕНИЕ ДЛЯ PIC16F876
;* Автор		:Галин Д.Г.	
;* Версия		:5.01b Версия переработанная совместными усилиями	
;* Название проекта	:"SafirMX"	
;* Комментарий	:Программное обеспечение для датчика Сафiр МХ	
;* Дата		:1.03.2002г.	
;*********************************************************************************************
	LIST    p=PIC16f876	
	#include "P16f876.inc"	;Загрузка Модуля: "P16f876.inc"
	#include "SafirMX.inc"	;Загрузка Модуля: "SafirMX.inc"
__CONFIG H'3D3D'
;*
;*********************************************************************************************
;-----------------------------------------------------------------------------
;Macros to select the register bank
;Many bank changes can be optimised when only one STATUS bit changes
;EXPAND
#define ClkFreq 1843200 ; input clock frequency = 1,8432 MHz
#define baud(X) ((10*ClkFreq/(64*X))+5)/10 - 1
Bank0		MACRO			;macro to select data RAM bank 0
		bcf	STATUS,RP0
		bcf	STATUS,RP1
		ENDM

Bank1		MACRO			;macro to select data RAM bank 1
		bsf	STATUS,RP0
		bcf	STATUS,RP1
		ENDM

Bank2		MACRO			;macro to select data RAM bank 2
		bcf	STATUS,RP0
		bsf	STATUS,RP1
		ENDM

Bank3		MACRO			;macro to select data RAM bank 3
		bsf	STATUS,RP0
		bsf	STATUS,RP1
		ENDM

;*********************************************************************************************
	ORG	0x0000	;Адрес сегмента кода: 0x0000
;*********************************************************************************************
;*********************************************************************************************
	goto	INSTALL	;Переход по адресу INSTALL
;*********************************************************************************************
	ORG	0x10	;Адрес сегмента кода: 0x1000
;*********************************************************************************************
;*********************************************************************************************
;*Подпрограмма: INSTALL
;*Назначение: Производит настройку портов микроконтроллера, загрузку начальных констант,
;*инсталляцию аппаратных устройств.
;*Используемые модули: "PORT.ASM", "CONST.ASM"
;*Используемые подпрограммы: СOMINSTALL, CONSTANTS, ADCSETUP, DEMPFCON, DAC, BOTHLED
;*Используемые регистры: OPTION_REG, JOBREG, STORE0, DACL, DACH, T2CON, PR2, PRS1BUF1,
;*PRS2BUF1, TMPBUF1
;*********************************************************************************************
INSTALL				;0-OUTPUT, 1-INPUT
	
	clrwdt			;Очистка сторожевого таймера
	movlw	0x0F		;Записать в аккумулятор число 0x0F
	iorwf	OPTION_REG,1	;Логическое сложение регистра OPTION_REG и аккумулятора
	;++ Конфигурирование регистра TMR0 PS2:PS0 Prescaller Rate  1/128 WDT
	bcf	STATUS,RP0	;Очистить бит RP0 в регистре STATUS
	movlw	B'11111000'	;++ Записать в аккумулятор число B'11111000'
	movwf	PORTB		;Переслать аккумулятор в регистр PORTB
	movlw	B'11111111'	;Записать в аккумулятор число B'11111111'
	movwf	PORTC		;Переслать аккумулятор в регистр PORTC
	bsf	STATUS,RP0	;Установить бит RP0 в регистре STATUS
	movlw	B'11111000'	;++ Записать в аккумулятор число B'11111011'
	movwf	TRISB		;Переслать аккумулятор в регистр TRISB
	movlw	B'10000101'	;++ Записать в аккумулятор число B'10000101'
	movwf	TRISC		;Переслать аккумулятор в регистр TRISC
	call	COMINSTALL	;++ Настройка последовательного интерфейса
;*********************************************************************************************
;*Модуль: "testbug.asm"
;*Назначение: Содержит подпрограммы для проверки портов микроконтроллера.
;*********************************************************************************************
;*********************************************************************************************
;*Подпрограмма: PORTINSTALL
;*Назначение: Производит тестирование портов микроконтроллера.
;*Используемые подпрограммы:
;*Используемые регистры: ADCON1, PORTA, TRISA, PORTB, TRISB, PORTC, TRISC
;*********************************************************************************************
test
	bcf	STATUS,7
	Bank0
	clrwdt		;Очистка сторожевого таймера
	bcf	RCSTA,CREN	;Очистить бит CREN в регистре RCSTA
	bsf	RCSTA,CREN	;Установить бит CREN в регистре RCSTA
	movlw	'V'
	movwf	TXD
	call	BYTEOUT
	movlw	'.'
	movwf	TXD
	call	BYTEOUT
	movlw	'1'
	movwf	TXD
	call	BYTEOUT
	movlw	'0'
	movwf	TXD
	call	BYTEOUT
test00
	clrwdt		;Очистка сторожевого таймера
	bcf	RCSTA,CREN	;Очистить бит CREN в регистре RCSTA
	bsf	RCSTA,CREN	;Установить бит CREN в регистре RCSTA
	bcf	JOBREG,RXER
	call	BYTEIN
	btfsc	JOBREG,RXER
	goto	test00
	movlw	0x55
	subwf	RXD,0
	btfss	STATUS,2
	goto	CommandAA
Command55
	call	BYTEIN
	btfsc	JOBREG,RXER
	goto	test00
	movf	RXD,0
	movwf	FSR
	call	BYTEIN
	btfsc	JOBREG,RXER
	goto	test00
	movlw	0x87
	subwf	FSR,0
	btfss	STATUS,2
	goto	next
	bsf	RXD,7		;++ RXD настроить на вход
	bcf	RXD,6		;++ TXD настроить на выход
next
	movf	RXD,0
	movwf	INDF	
	goto	test00	
CommandAA
	movlw	0xAA
	subwf	RXD,0
	btfss	STATUS,2
	goto	Command00	
	call	BYTEIN
	btfsc	JOBREG,RXER
	goto	test00
	movf	RXD,0
	movwf	FSR
	movf	INDF,0
	movwf	TXD
	call	BYTEOUT
	goto	test00
Command00
	movlw	0x00
	subwf	RXD,0
	btfss	STATUS,2
	goto	test
	movlw	0
	movwf	PCLATH
	goto	0
;*********************************************************************************************
;*********************************************************************************************
;*Модуль: "COMPORT.ASM"
;*Назначение: Содержит подпрограммы связи датчика с ПК по COM-порту
;*********************************************************************************************
;********************************************************************************************* 
;*Подпрограмма: COMINSTALL
;*Назначение: Производит инсталляцию COM-порта (Скорость: 9600 бод при Fclk=1.843200 MHz)
;*Используемые подпрограммы: 
;*Используемые регистры: SPBRG, TXSTA, RCSTA
;*********************************************************************************************
COMINSTALL	
	bsf	STATUS,RP0	;Установить бит RP0 в регистре STATUS 	Bank1
	movlw	2	;++ Коэффициент для скорости обмена по 	RS232 9600 bps

	movwf	SPBRG		;Переслать аккумулятор в регистр SPBRG
	bcf	TXSTA,BRGH	;Очистить бит BRGH в регистре TXSTA 	Low speed
	bcf	TXSTA,SYNC	;Очистить бит SYNC в регистре TXSTA	Asynch mode
	bsf	TXSTA,TXEN	;Установить бит TXEN в регистре TXSTA	Transmit enabled
	bcf	STATUS,RP0	;Очистить бит RP0 в регистре STATUS	Bank0
	bsf	RCSTA,SPEN	;Установить бит SPEN в регистре RCSTA	Serial enable
	bsf	RCSTA,CREN	;Установить бит CREN в регистре RCSTA	Contin,receive enable
	bsf	TRISC,7		;++ RXD настроить на вход
	bcf	TRISC,6		;++ TXD настроить на выход
	bcf	RCSTA,CREN	;Очистить бит CREN в регистре RCSTA
	bsf	RCSTA,CREN	;Установить бит CREN в регистре RCSTA
	Bank0
	return		
;*********************************************************************************************
;********************************************************************************************* 
;*Подпрограмма: INQUIRY
;*Назначение: Обеспечивает захват запроса ПК на связь.
;*Используемые подпрограммы: BYTEOUT, DECODE
;*Используемые регистры: RCSTA, PIR1, RCREG, RXD, TXD
;*********************************************************************************************
INQUIRY	
	clrwdt		;Очистка сторожевого таймера
	bcf	RCSTA,CREN	;Очистить бит CREN в регистре RCSTA
	bsf	RCSTA,CREN	;Установить бит CREN в регистре RCSTA
	btfss	PIR1,RCIF	;Пропустить команду, если бит RCIF в регистре PIR1 равен 1
	return		;Возврат из подпрограммы
	movf	RCREG,0	;Переслать регистр RCREG в аккумулятор
	movwf	RXD	;Переслать аккумулятор в регистр RXD
	movwf	TXD	;Переслать аккумулятор в регистр TXD
	call	BYTEOUT	;Вызов подпрограммы BYTEOUT
	return		;Возврат из подпрограммы
;********************************************************************************************* 
;********************************************************************************************* 
;*Подпрограмма: BYTEOUT
;*Назначение: Обеспечивает выдачу байта данных по COM-порту.
;*Используемые подпрограммы: 
;*Используемые регистры: TXSTA, TXD, TXREG
;*********************************************************************************************
BYTEOUT	bsf	STATUS,RP0	;++ Установить Bank1
txd1	btfss	TXSTA,TRMT	;Пропустить команду, если бит TRMT в регистре TXSTA равен 1
	goto	txd1	;Переход по адресу txd1
	bcf	STATUS,RP0	;++ Установить Bank0
	movf	TXD,0	;Переслать регистр TXD в аккумулятор
	movwf	TXREG	;Переслать аккумулятор в регистр TXREG
	clrwdt		;Очистка сторожевого таймера
	return		;Возврат из подпрограммы
;********************************************************************************************* 
;********************************************************************************************* 
;*Подпрограмма: BYTEIN
;*Назначение: Обеспечивает приём байта данных по COM-порту.
;*Используемые подпрограммы: 
;*Используемые регистры: JOBREG, CNT0, CNT1, PIR1, TXREG, RCREG, RXD
;*********************************************************************************************

BYTEIN	bcf	JOBREG,RXER	;Очистить бит RXER в регистре JOBREG
	movlw	0xFF	;Записать в аккумулятор число 0xFF
	movwf	CNT1	;Переслать аккумулятор в регистр CNT1
rxd0	clrwdt		;Очистка сторожевого таймера
	movlw	0xFF	;Записать в аккумулятор число 0xFF
	movwf	CNT0	;Переслать аккумулятор в регистр CNT0
rxd1	btfsc	PIR1,RCIF	;Пропустить команду, если бит RCIF в регистре PIR1 равен 0
	goto	rxd2	;Переход по адресу rxd2
	decfsz	CNT0,1	;Декремент регистра CNT0, пропустить команду если 0
	goto	rxd1	;Переход по адресу rxd1
	decfsz	CNT1,1	;Декремент регистра CNT1, пропустить команду если 0
	goto	rxd0	;Переход по адресу rxd0
	bsf	JOBREG,RXER	;Установить бит RXER в регистре JOBREG
	return		;Возврат из подпрограммы
rxd2	movf	RCREG,0	;Переслать регистр RCREG в аккумулятор
	movwf	RXD	;Переслать аккумулятор в регистр RXD
;	movwf	TXREG	;Переслать аккумулятор в регистр TXREG
	clrwdt		;Очистка сторожевого таймера
	return		;Возврат из подпрограммы
;********************************************************************************************* 
;********************************************************************************************* 
;*Подпрограмма: READNBYTE
;*Назначение: Обеспечивает приём нескольких (до 256) байт данных по COM-порту
;*Используемые подпрограммы: BYTEIN
;*Используемые регистры: DLY0, DLY1, TEMPB0, TEMPB1, STORE0, JOBREG, RXD
;*********************************************************************************************
READNBYTE	movlw	0x07	;Записать в аккумулятор число 0x07
	andwf	DLY0,0	;Логическое умножение аккумулятора и регистра DLY0
	movwf	DLY0	;Переслать аккумулятор в регистр DLY0
	movwf	DLY1	;Переслать аккумулятор в регистр DLY1
	movf	FSR,0	;Переслать регистр FSR в аккумулятор
	movwf	TEMPB0	;Переслать аккумулятор в регистр TEMPB0
	movlw	STORE0	;Записать в аккумулятор число STORE0
	movwf	FSR	;Переслать аккумулятор в регистр FSR
rnb0	call	BYTEIN	;Вызов подпрограммы BYTEIN
	btfsc	JOBREG,RXER	;Пропустить команду, если бит RXER в регистре JOBREG равен 0
	return		;Возврат из подпрограммы
	movf	RXD,0	;Переслать регистр RXD в аккумулятор
	movwf	INDF	;Переслать аккумулятор в регистр INDF
	incf	FSR,1	;Инкремент регистра FSR, результат в регистре
	decfsz	DLY0,1	;Декремент регистра DLY0, пропустить команду если 0
	goto	rnb0	;Переход по адресу rnb0
	movlw	STORE0	;Записать в аккумулятор число STORE0
	movwf	FSR	;Переслать аккумулятор в регистр FSR
	movwf	TEMPB1	;Переслать аккумулятор в регистр TEMPB1
rnb1	movf	INDF,0	;Переслать регистр INDF в аккумулятор
	movwf	DLY0	;Переслать аккумулятор в регистр DLY0
	movf	TEMPB0,0	;Переслать регистр TEMPB0 в аккумулятор
	movwf	FSR	;Переслать аккумулятор в регистр FSR
	movf	DLY0,0	;Переслать регистр DLY0 в аккумулятор
	movwf	INDF	;Переслать аккумулятор в регистр INDF
	decf	FSR,0	;Декремент регистра FSR, результат в аккумуляторе
	movwf	TEMPB0	;Переслать аккумулятор в регистр TEMPB0
	incf	TEMPB1,0	;Инкремент регистра TEMPB1, результат в аккумуляторе
	movwf	TEMPB1	;Переслать аккумулятор в регистр TEMPB1
	movwf	FSR	;Переслать аккумулятор в регистр FSR
	decfsz	DLY1,1	;Декремент регистра DLY1, пропустить команду если 0
	goto	rnb1	;Переход по адресу rnb1
	return		;Возврат из подпрограммы
;********************************************************************************************* 
;********************************************************************************************* 
;*Подпрограмма: WRITENBYTE
;*Назначение: Обеспечивает выдачу нескольких (до 256) байт данных по COM-порту. 
;*Используемые подпрограммы: BYTEOUT.
;*Используемые регистры: TXD, DLY0, (STORE0:STORE7).
;*********************************************************************************************
WRITENBYTE	movf	INDF,0	;Переслать регистр INDF в аккумулятор
	movwf	TXD	;Переслать аккумулятор в регистр TXD
	call	BYTEOUT	;Вызов подпрограммы BYTEOUT
	decf	FSR,1	;Декремент регистра FSR, результат в регистре
	decfsz	DLY0,1	;Декремент регистра DLY0, пропустить команду если 0
	goto	WRITENBYTE	;Переход по адресу WRITENBYTE
	return		;Возврат из подпрограммы
;*********************************************************************************************
;*********************************************************************************************
	end
;*********************************************************************************************
;*********************************************************************************************
